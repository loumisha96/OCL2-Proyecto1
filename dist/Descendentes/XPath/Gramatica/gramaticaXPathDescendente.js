/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXPathDescendente = (function() {
    var o = function(k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v); return o },
        $V0 = [1, 5],
        $V1 = [1, 6],
        $V2 = [1, 8],
        $V3 = [1, 12],
        $V4 = [1, 19],
        $V5 = [1, 20],
        $V6 = [1, 21],
        $V7 = [1, 22],
        $V8 = [1, 23],
        $V9 = [1, 24],
        $Va = [1, 25],
        $Vb = [1, 26],
        $Vc = [1, 27],
        $Vd = [1, 28],
        $Ve = [1, 29],
        $Vf = [1, 30],
        $Vg = [1, 31],
        $Vh = [1, 13],
        $Vi = [1, 14],
        $Vj = [1, 15],
        $Vk = [1, 16],
        $Vl = [1, 17],
        $Vm = [1, 18],
        $Vn = [8, 13, 14, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63],
        $Vo = [2, 8],
        $Vp = [1, 37],
        $Vq = [1, 38],
        $Vr = [1, 36],
        $Vs = [5, 8, 9, 13, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],
        $Vt = [1, 41],
        $Vu = [5, 8, 9, 13, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42],
        $Vv = [14, 28, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63],
        $Vw = [2, 19],
        $Vx = [1, 56],
        $Vy = [1, 57],
        $Vz = [1, 58],
        $VA = [1, 72],
        $VB = [1, 80],
        $VC = [2, 23],
        $VD = [1, 69],
        $VE = [1, 70],
        $VF = [1, 71],
        $VG = [1, 73],
        $VH = [1, 74],
        $VI = [1, 75],
        $VJ = [1, 76],
        $VK = [1, 77],
        $VL = [1, 78],
        $VM = [1, 79],
        $VN = [1, 81],
        $VO = [1, 82],
        $VP = [8, 13, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],
        $VQ = [8, 9, 14, 28, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63];
    var parser = {
        trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "ini": 3, "XPATH": 4, "EOF": 5, "ENTRY": 6, "LIST_STEP": 7, "slash": 8, "doubleSlash": 9, "STEP": 10, "LIST_STEPP": 11, "SEPARATE": 12, "barra": 13, "id": 14, "LIST_PREDICATE": 15, "AXIS": 16, "WILDCARD": 17, "PREDICATE": 18, "LIST_PREDICATEP": 19, "corcheteIzq": 20, "LIST_E": 21, "corcheteDer": 22, "E": 23, "LIST_EP": 24, "OP": 25, "add": 26, "minus": 27, "asterisk": 28, "equal": 29, "diferent": 30, "menor": 31, "menorIgual": 32, "mayorIgual": 33, "mayor": 34, "or": 35, "and": 36, "mod": 37, "decimal": 38, "digits": 39, "cadena": 40, "AXIS_NAME": 41, "doubleColon": 42, "ancestor": 43, "ancestor_or_self": 44, "attribute": 45, "child": 46, "descendant": 47, "descendant_or_self": 48, "following": 49, "following_sibling": 50, "namespace": 51, "parent": 52, "preceding": 53, "preceding_sibling": 54, "self": 55, "twoPoint": 56, "point": 57, "at": 58, "node": 59, "parIzq": 60, "parDer": 61, "text": 62, "last": 63, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 8: "slash", 9: "doubleSlash", 13: "barra", 14: "id", 20: "corcheteIzq", 22: "corcheteDer", 26: "add", 27: "minus", 28: "asterisk", 29: "equal", 30: "diferent", 31: "menor", 32: "menorIgual", 33: "mayorIgual", 34: "mayor", 35: "or", 36: "and", 37: "mod", 38: "decimal", 39: "digits", 40: "cadena", 42: "doubleColon", 43: "ancestor", 44: "ancestor_or_self", 45: "attribute", 46: "child", 47: "descendant", 48: "descendant_or_self", 49: "following", 50: "following_sibling", 51: "namespace", 52: "parent", 53: "preceding", 54: "preceding_sibling", 55: "self", 56: "twoPoint", 57: "point", 58: "at", 59: "node", 60: "parIzq", 61: "parDer", 62: "text", 63: "last" },
        productions_: [0, [3, 2],
            [4, 2],
            [4, 1],
            [6, 1],
            [6, 1],
            [7, 2],
            [11, 3],
            [11, 0],
            [12, 2],
            [12, 1],
            [12, 1],
            [12, 1],
            [10, 2],
            [10, 1],
            [10, 1],
            [10, 1],
            [15, 2],
            [19, 2],
            [19, 0],
            [18, 3],
            [21, 2],
            [24, 3],
            [24, 0],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [25, 1],
            [23, 1],
            [23, 1],
            [23, 1],
            [23, 1],
            [23, 1],
            [16, 3],
            [16, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [41, 1],
            [17, 1],
            [17, 1],
            [17, 1],
            [17, 2],
            [17, 3],
            [17, 2],
            [17, 3],
            [17, 3],
            [17, 3]
        ],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:

                    this.$ = new NodeDesc('INI');
                    this.$.childList.push($$[$0 - 1]);
                    return this.$;

                    break;
                case 2:

                    this.$ = new NodeDesc('XPATH');
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);


                    break;
                case 3:

                    this.$ = new NodeDesc('XPATH');
                    this.$.childList.push($$[$0]);

                    break;
                case 4:
                case 5:

                    this.$ = new NodeDesc('ENTRY');
                    this.$.childList.push($$[$0]);

                    break;
                case 6:

                    this.$ = new NodeDesc('LIST_STEP');
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 7:

                    this.$ = new NodeDesc('LIST_STEP');
                    this.$.childList.push($$[$0 - 2]);
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 8:
                case 19:

                    break;
                case 9:

                    this.$ = new NodeDesc("SEPARATE");
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 10:
                case 11:
                case 12:

                    this.$ = new NodeDesc("SEPARATE");
                    this.$.childList.push($$[$0]);

                    break;
                case 13:

                    this.$ = new NodeDesc("STEP");
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 14:
                case 15:
                case 16:

                    this.$ = new NodeDesc("STEP");
                    this.$.childList.push($$[$0]);

                    break;
                case 17:
                     
                    this.$ = new NodeDesc("LIST_PREDICATE");
                    this.$.childList.push($$[$0]);
                    this.$.childList.push($$[$0 - 1]);

                    break;
                case 18:

                    this.$ = new NodeDesc('LIST_PREDICATEP');
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);



                    break;
                case 20:

                    this.$ = new NodeDesc("PREDICATE");
                    this.$.childList.push($$[$0 - 2]);
                    this.$.childList.push($$[$0 - 1]);

                    break;
                case 21:

                    this.$ = new NodeDesc("LIST_E");
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 22:

                    this.$ = new NodeDesc("LIST_EP");
                    this.$.childList.push($$[$0 - 2]);
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 23:

                    break;
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:

                    this.$ = new NodeDesc("OP");
                    this.$.childList.push($$[$0]);

                    break;
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:

                    this.$ = new NodeDesc("E");
                    this.$.childList.push($$[$0]);

                    break;
                case 43:

                    this.$ = new NodeDesc("AXIS");
                    this.$.childList.push($$[$0 - 2]);
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 44:

                    this.$ = new NodeDesc("AXIS");
                    this.$.childList.push($$[$0]);

                    break;
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:

                    this.$ = new NodeDesc("AXIS_NAME");
                    this.$.childList.push($$[$0]);

                    break;
                case 58:
                case 59:
                case 60:

                    this.$ = new NodeDesc("WILDCARD");
                    this.$.childList.push($$[$0]);

                    break;
                case 61:
                case 63:

                    this.$ = new NodeDesc("WILDCARD");
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
                case 62:
                case 64:
                case 65:
                case 66:

                    this.$ = new NodeDesc("WILDCARD");
                    this.$.childList.push($$[$0 - 2]);
                    this.$.childList.push($$[$0 - 1]);
                    this.$.childList.push($$[$0]);

                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 8: $V0, 9: $V1, 10: 7, 14: $V2, 16: 9, 17: 10, 28: $V3, 41: 11, 43: $V4, 44: $V5, 45: $V6, 46: $V7, 47: $V8, 48: $V9, 49: $Va, 50: $Vb, 51: $Vc, 52: $Vd, 53: $Ve, 54: $Vf, 55: $Vg, 56: $Vh, 57: $Vi, 58: $Vj, 59: $Vk, 62: $Vl, 63: $Vm }, { 1: [3] }, { 5: [1, 32] }, { 7: 33, 10: 7, 14: $V2, 16: 9, 17: 10, 28: $V3, 41: 11, 43: $V4, 44: $V5, 45: $V6, 46: $V7, 47: $V8, 48: $V9, 49: $Va, 50: $Vb, 51: $Vc, 52: $Vd, 53: $Ve, 54: $Vf, 55: $Vg, 56: $Vh, 57: $Vi, 58: $Vj, 59: $Vk, 62: $Vl, 63: $Vm }, { 5: [2, 3] }, o($Vn, [2, 4]), o($Vn, [2, 5]), { 5: $Vo, 8: $Vp, 9: $Vq, 11: 34, 12: 35, 13: $Vr }, o($Vs, [2, 14], { 15: 39, 18: 40, 20: $Vt }), o($Vs, [2, 15]), o($Vs, [2, 16]), o($Vs, [2, 44], { 42: [1, 42] }), o($Vs, [2, 58]), o($Vs, [2, 59]), o($Vs, [2, 60]), { 14: [1, 44], 28: [1, 43] }, { 60: [1, 45] }, { 60: [1, 46] }, { 60: [1, 47] }, o($Vu, [2, 45]), o($Vu, [2, 46]), o($Vu, [2, 47]), o($Vu, [2, 48]), o($Vu, [2, 49]), o($Vu, [2, 50]), o($Vu, [2, 51]), o($Vu, [2, 52]), o($Vu, [2, 53]), o($Vu, [2, 54]), o($Vu, [2, 55]), o($Vu, [2, 56]), o($Vu, [2, 57]), { 1: [2, 1] }, { 5: [2, 2] }, { 5: [2, 6] }, { 10: 48, 14: $V2, 16: 9, 17: 10, 28: $V3, 41: 11, 43: $V4, 44: $V5, 45: $V6, 46: $V7, 47: $V8, 48: $V9, 49: $Va, 50: $Vb, 51: $Vc, 52: $Vd, 53: $Ve, 54: $Vf, 55: $Vg, 56: $Vh, 57: $Vi, 58: $Vj, 59: $Vk, 62: $Vl, 63: $Vm }, o($Vv, [2, 10], { 6: 49, 8: $V0, 9: $V1 }), o($Vv, [2, 11]), o($Vv, [2, 12]), o($Vs, [2, 13]), o($Vs, $Vw, { 19: 50, 18: 51, 20: $Vt }), { 6: 55, 8: $V0, 9: $V1, 10: 54, 14: $V2, 16: 9, 17: 10, 21: 52, 23: 53, 28: $V3, 38: $Vx, 39: $Vy, 40: $Vz, 41: 11, 43: $V4, 44: $V5, 45: $V6, 46: $V7, 47: $V8, 48: $V9, 49: $Va, 50: $Vb, 51: $Vc, 52: $Vd, 53: $Ve, 54: $Vf, 55: $Vg, 56: $Vh, 57: $Vi, 58: $Vj, 59: $Vk, 62: $Vl, 63: $Vm }, { 10: 59, 14: $V2, 16: 9, 17: 10, 28: $V3, 41: 11, 43: $V4, 44: $V5, 45: $V6, 46: $V7, 47: $V8, 48: $V9, 49: $Va, 50: $Vb, 51: $Vc, 52: $Vd, 53: $Ve, 54: $Vf, 55: $Vg, 56: $Vh, 57: $Vi, 58: $Vj, 59: $Vk, 62: $Vl, 63: $Vm }, o($Vs, [2, 61]), o($Vs, [2, 63], { 18: 60, 20: $Vt }), { 61: [1, 61] }, { 61: [1, 62] }, { 61: [1, 63] }, { 5: $Vo, 8: $Vp, 9: $Vq, 11: 64, 12: 35, 13: $Vr }, o($Vv, [2, 9]), o($Vs, [2, 17]), o($Vs, $Vw, { 18: 51, 19: 65, 20: $Vt }), { 22: [1, 66] }, { 8: $VA, 13: $VB, 22: $VC, 24: 67, 25: 68, 26: $VD, 27: $VE, 28: $VF, 29: $VG, 30: $VH, 31: $VI, 32: $VJ, 33: $VK, 34: $VL, 35: $VM, 36: $VN, 37: $VO }, o($VP, [2, 38]), o($VP, [2, 39]), o($VP, [2, 40]), o($VP, [2, 41]), o($VP, [2, 42]), o($Vs, [2, 43]), o($Vs, [2, 62]), o($Vs, [2, 64]), o($Vs, [2, 65]), o($Vs, [2, 66]), { 5: [2, 7] }, o($Vs, [2, 18]), o([5, 8, 9, 13, 20, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], [2, 20]), { 22: [2, 21] }, { 6: 55, 8: $V0, 9: $V1, 10: 54, 14: $V2, 16: 9, 17: 10, 23: 83, 28: $V3, 38: $Vx, 39: $Vy, 40: $Vz, 41: 11, 43: $V4, 44: $V5, 45: $V6, 46: $V7, 47: $V8, 48: $V9, 49: $Va, 50: $Vb, 51: $Vc, 52: $Vd, 53: $Ve, 54: $Vf, 55: $Vg, 56: $Vh, 57: $Vi, 58: $Vj, 59: $Vk, 62: $Vl, 63: $Vm }, o($VQ, [2, 24]), o($VQ, [2, 25]), o($VQ, [2, 26]), o($VQ, [2, 27]), o($VQ, [2, 28]), o($VQ, [2, 29]), o($VQ, [2, 30]), o($VQ, [2, 31]), o($VQ, [2, 32]), o($VQ, [2, 33]), o($VQ, [2, 34]), o($VQ, [2, 35]), o($VQ, [2, 36]), o($VQ, [2, 37]), { 8: $VA, 13: $VB, 22: $VC, 24: 84, 25: 68, 26: $VD, 27: $VE, 28: $VF, 29: $VG, 30: $VH, 31: $VI, 32: $VJ, 33: $VK, 34: $VL, 35: $VM, 36: $VN, 37: $VO }, { 22: [2, 22] }],
        defaultActions: { 4: [2, 3], 32: [2, 1], 33: [2, 2], 34: [2, 6], 64: [2, 7], 67: [2, 21], 84: [2, 22] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack:
                var lex = function() {
                    var token;
                    token = lexer.lex() || EOF;
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {},
                p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };


    /* generated by jison-lex 0.3.4 */
    var lexer = (function() {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
                        oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function(match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-insensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return 28;
                        break;
                    case 1:
                        return 56;
                        break;
                    case 2:
                        return 57;
                        break;
                    case 3:
                        return 60;
                        break;
                    case 4:
                        return 61;
                        break;
                    case 5:
                        return 'llaIzq';
                        break;
                    case 6:
                        return 'llaDer';
                        break;
                    case 7:
                        return 42;
                        break;
                    case 8:
                        return 'colon';
                        break;
                    case 9:
                        return 13;
                        break;
                    case 10:
                        return 20;
                        break;
                    case 11:
                        return 22;
                        break;
                    case 12:
                        return 'ptcoma';
                        break;
                    case 13:
                        return 26;
                        break;
                    case 14:
                        return 'comma';
                        break;
                    case 15:
                        return 27;
                        break;
                    case 16:
                        return 'arrow';
                        break;
                    case 17:
                        return 29;
                        break;
                    case 18:
                        return 9;
                        break;
                    case 19:
                        return 8;
                        break;
                    case 20:
                        return 30;
                        break;
                    case 21:
                        return 31;
                        break;
                    case 22:
                        return 32;
                        break;
                    case 23:
                        return 34;
                        break;
                    case 24:
                        return 33;
                        break;
                    case 25:
                        return 58;
                        break;
                    case 26:
                        return 35;
                        break;
                    case 27:
                        return 'let';
                        break;
                    case 28:
                        return 63;
                        break;
                    case 29:
                        return 36;
                        break;
                    case 30:
                        return 'div';
                        break;
                    case 31:
                        return 37;
                        break;
                    case 32:
                        return 62;
                        break;
                    case 33:
                        return 59;
                        break;
                    case 34:
                        return 46;
                        break;
                    case 35:
                        return 55;
                        break;
                    case 36:
                        return 52;
                        break;
                    case 37:
                        return 'comment';
                        break;
                    case 38:
                        return 'element';
                        break;
                    case 39:
                        return 43;
                        break;
                    case 40:
                        return 51;
                        break;
                    case 41:
                        return 45;
                        break;
                    case 42:
                        return 53;
                        break;
                    case 43:
                        return 49;
                        break;
                    case 44:
                        return 44;
                        break;
                    case 45:
                        return 48;
                        break;
                    case 46:
                        return 50;
                        break;
                    case 47:
                        return 54;
                        break;
                    case 48:
                        return 'processing_instruction';
                        break;
                    case 49:
                        break;
                    case 50:
                        break;
                    case 51:
                        return 'digits';
                        break;
                    case 52:
                        return 'decimal';
                        break;
                    case 53:
                        return 40;
                        break;
                    case 54:
                        return 14;
                        break;
                    case 55:
                        return 5;
                        break;
                    case 56:
                        console.error('Error');

                        break;
                }
            },
            rules: [/^(?:\*)/i, /^(?:\.\.)/i, /^(?:\.)/i, /^(?:\()/i, /^(?:\))/i, /^(?:\{)/i, /^(?:\})/i, /^(?:::)/i, /^(?::)/i, /^(?:\|)/i, /^(?:\[)/i, /^(?:\])/i, /^(?:;)/i, /^(?:\+)/i, /^(?:,)/i, /^(?:-)/i, /^(?:=>)/i, /^(?:=)/i, /^(?:\/\/)/i, /^(?:\/)/i, /^(?:!=)/i, /^(?:<)/i, /^(?:<=)/i, /^(?:>)/i, /^(?:>=)/i, /^(?:@)/i, /^(?:or\b)/i, /^(?:let\b)/i, /^(?:last\b)/i, /^(?:and\b)/i, /^(?:div\b)/i, /^(?:mod\b)/i, /^(?:text\b)/i, /^(?:node\b)/i, /^(?:child\b)/i, /^(?:self\b)/i, /^(?:parent\b)/i, /^(?:comment\b)/i, /^(?:element\b)/i, /^(?:ancestor\b)/i, /^(?:namespace\b)/i, /^(?:attribute\b)/i, /^(?:preceding\b)/i, /^(?:following\b)/i, /^(?:ancestor_or_self\b)/i, /^(?:descendant_or_self\b)/i, /^(?:following_sibling\b)/i, /^(?:preceding_sibling\b)/i, /^(?:processing_instruction\b)/i, /^(?:[ \r\t]+)/i, /^(?:\n)/i, /^(?:[0-9]+)/i, /^(?:[0-9]+(\.[0-9]+)?)/i, /^(?:("({EscapeQuot}|[^"])*")|('\(\{EscapeApos\}\|\[\^'\]\)\*'))/i, /^(?:[A-Za-z_][A-Za-z_0-9]*)/i, /^(?:$)/i, /^(?:.)/i],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = gramaticaXPathDescendente;
    exports.Parser = gramaticaXPathDescendente.Parser;
    exports.parse = function() { return gramaticaXPathDescendente.parse.apply(gramaticaXPathDescendente, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}